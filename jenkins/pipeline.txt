pipeline {
    agent any
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Init') {
            steps {
                echo "\u001b[35m[Projet ${env.JOB_NAME}] - Lancement du build: ${env.BUILD_DISPLAY_NAME} par ${env.NODE_NAME}\u001b[0m"
                
                script {
                    env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%s ${GIT_COMMIT}', returnStdout: true).trim()
                    env.GIT_COMMIT_NB = sh (script: 'git log -1 --pretty=%h ${GIT_COMMIT}', returnStdout: true).trim()
                    env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%an ${GIT_COMMIT}', returnStdout: true).trim()
                    env.GIT_AUTHOR_MAIL = sh (script: 'git log -1 --pretty=%ae ${GIT_COMMIT}', returnStdout: true).trim()
                }
                
                echo "\u001b[35m[Projet ${env.JOB_NAME}] - Git commit #${env.GIT_COMMIT_NB} \"${env.GIT_COMMIT_MSG}\" @author: ${env.GIT_AUTHOR_MAIL} (${env.GIT_AUTHOR})\u001b[0m"
                // slackSend channel: 'C021DS82PMG', color: "#439FE0", message: "[Projet ${env.JOB_NAME}] - Lancement du build: ${env.BUILD_DISPLAY_NAME}"
            }
        }
        
        stage('Checkout code') {
            steps {
                git credentialsId: 'ede1d98f-db6f-4bb6-a01b-ad304616ed46', url: 'https://github.com/apalpant/gradle-jenkins'
            }
        }
       
        stage('Install dependencies') {
            steps {
                sh 'python3 -m venv venv'
                sh '. venv/bin/activate'
                sh 'python3 -m pip install pytest pytest-cov pycodestyle pylint'
                sh 'pip3 freeze > requirements.txt'
                // sh 'python3 -m pip install -r requirements.txt'
            }   
        }
        
        stage('Build application') {
            steps {
                sh '/opt/gradle/latest/bin/gradle packageDistribution'
            }
        }
        
        stage('Test application') { 
            steps {
                // Run virtual environment
                sh '. venv/bin/activate'
                
                // Run pytest
                sh 'python3 -m pytest -v --cov=calculator'
                
                // Run coverage.
                sh 'python3 -m coverage xml'
                
                // Run Pylint.
                sh 'python3 -m pylint -f parseable ${WORKSPACE}/src/ | tee pylint.report'

                // Run Pycodestyle (PEP8 checks).
                 sh 'python3 -m pycodestyle ${WORKSPACE}/src/ | tee pep8.report'
            }
            
        }
        
        stage('Publish Code QA') {
            steps {
                echo 'Publishing Code QA ....'
                
                recordIssues(
                    aggregatingResults: true, 
                    tools: [pyLint(pattern: 'pylint.report'), pep8(pattern: 'pep8.report')],
                    unstableTotalAll: 20,
                    failedTotalAll: 30
                )
                    
                cobertura coberturaReportFile: 'coverage.xml'
            }
        }
        
        stage('deploy') {
            steps {
                sh 'python3 --version'
            }
        }
    }
    post {
        always {
            script {
                color = "danger"
                ansiColor = "\u001b[31m"
                if (currentBuild.currentResult == "SUCCESS") {
                    color = "good"
                    ansiColor = "\u001b[32m"
                } else if (currentBuild.currentResult == "UNSTABLE") {
                    color = "warning"
                    ansiColor = "\u001b[33m"
                }
            }
            echo "[Projet ${env.JOB_NAME}] - Fin du build avec le statut:  ${ansiColor}${currentBuild.currentResult}\u001b[0m (${currentBuild.durationString})"
            // slackSend channel: 'C021DS82PMG', color: "${color}", message: "[Projet ${env.JOB_NAME}] - Fin du build avec le statut:  ${currentBuild.currentResult} (${currentBuild.durationString})"
        }
    }
}