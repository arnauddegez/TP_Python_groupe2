pipeline {
    agent any
    environment {
        PATH="/var/lib/jenkins/.local/lib/python3.7/site-packages:$PATH"
    }
    stages {
        stage('slack') {
            steps {
                // slackSend channel: 'C021DS82PMG', color: "#439FE0", message: "[Projet ${env.JOB_NAME}] - Lancement du build:  ${env.BUILD_NUMBER}"
                echo "[Projet ${env.JOB_NAME}] - Lancement du build:  ${env.BUILD_NUMBER}"
            }
        }
        stage('Checkout code') {
            steps {
                git credentialsId: 'ede1d98f-db6f-4bb6-a01b-ad304616ed46', url: 'https://github.com/apalpant/gradle-jenkins'
            }
        }
        stage('ansi') {
            steps {
                sh 'python --version'
                ansiColor('xterm') {
                  sh "ls -al"
                }
                ansiColor('vga') {
                  echo '\033[42m\033[97mWhite letters, green background\033[0m'
                }
                ansiColor('xterm') {
                    echo "TERM=${env.TERM}"
                    echo '\033[34mHello\033[0m \033[33mcolorful\033[0m \033[35mworld!\033[0m'
                }
            }
        }
        stage('install dependencies') {
            steps {
                sh 'python3 -m venv venv'
                sh '. venv/bin/activate'
                sh 'python3 -m pip install pytest pytest-cov pycodestyle pylint epydoc pylint-junit'
                sh 'pip3 freeze > requirements.txt'
                // sh 'python3 -m pip install -r requirements.txt'
            }   
        }
        
        stage('build') {
            steps {
                sh '/opt/gradle/latest/bin/gradle packageDistribution'
            }
        }
        stage('Test') { 
            steps {
                sh '. venv/bin/activate'
                sh 'python3 -m pycodestyle ${WORKSPACE}/src/ | tee pep8_report.txt'
                sh 'python3 -m pylint --output-format=parseable ${WORKSPACE}/src/ | tee pylint_report.txt'
                // sh 'python3 -m pylint --output-format=junit ${WORKSPACE}/src/'
                sh 'python3 -m pytest -v --cov=calculator'
                sh 'python3 -m coverage xml'
               
                // sh '[ -d ${WORKSPACE}/API ] && rm -fr ${WORKSPACE}/API'
                //sh 'python3 -m epydoc ${WORKSPACE}/src/ --html'
            }
        }
        
        stage('Publish Code QA') {
            steps {
                echo 'Publishing Code QA ....'
                 cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            }
        }
        
        stage('deploy') {
            steps {
                sh 'python3 --version'
            }
        }
    }
    post {
        always {
            script {
                color = "danger"
                if (currentBuild.currentResult == "SUCCESS") {
                    color = "good"
                } else if (currentBuild.currentResult == "UNSTABLE") {
                    color = "warning"
                }
            }
            // slackSend channel: 'C021DS82PMG', color: "${color}", message: "[Projet ${env.JOB_NAME}] - Fin du build avec le statut:  ${currentBuild.currentResult} (${currentBuild.durationString})"
        }
    }
}